def dijkstraAlgorithm(chargingStationNetwork, start): #Function for the Dijkstra Algorithm
    #Stores all the distances from each node to each node
    allDistances = {node: float('inf') for node in chargingStationNetwork}
    allDistances[start] = 0
    
    #Keeps track of previous nodes of each node in their path to the destination. Set to 'None' initally.
    pastNodes = {}
    for node in chargingStationNetwork:
        pastNodes[node] = None
    
    #Stores the nodes that need to be visited
    visitedNodes = [(0, start)]
    
    for nodes in range(len(chargingStationNetwork)): #Loop that runs for the amount of nodes in the network
        #Sorts the nodes that are visited by distance. Shortest distance is sorted first
        visitedNodes.sort()
        currentDistance, currentNode = visitedNodes.pop(0)
        
        #Updates the distances and nodes to get to the destination
        for adjacentNodes, routeDistance in chargingStationNetwork[currentNode]:
            distance = currentDistance + routeDistance
            if distance < allDistances[adjacentNodes]:
                allDistances[adjacentNodes] = distance
                pastNodes[adjacentNodes] = currentNode
                visitedNodes.append((distance, adjacentNodes))
        
    return allDistances, pastNodes

def findShortestRoute(startingPoint, chargingStations, pastNodes): #Function for calculating the shortest route
    route = [] #Empty list that stores shortest route to destination from starting point
    currentNode = chargingStations

    while currentNode:
        route.append(currentNode)
        currentNode = pastNodes[currentNode]
    route.reverse()
    return route
    #Until the current node reaches the destination, append the nodes in its route 
    #to the route list, then return the shortest routes to each charging station

#The given network of nodes and charging stations.
#Each node contains all of their adjacent nodes as well as the distance it takes to get to them.
chargingStationNetwork = {
    'A': [('B', 6), ('F', 5)],
    'B': [('A', 6), ('C', 5), ('G', 6)],
    'C': [('B', 5), ('D', 7), ('H', 5)],
    'D': [('C', 7), ('E', 7), ('I', 8)],
    'E': [('D', 7), ('I', 6), ('N', 15)],
    'F': [('A', 5), ('G', 8), ('J', 7)],
    'G': [('B', 6), ('F', 8), ('H', 9), ('K', 8)],
    'H': [('C', 5), ('G', 9), ('I', 5)],
    'I': [('H', 12), ('D', 8), ('E', 6), ('M', 10)],
    'J': [('F', 7), ('K', 5), ('O', 7)],
    'K': [('J', 5), ('G', 8), ('L', 7)],
    'L': [('K', 7), ('P', 7), ('M', 7)],
    'M': [('L', 7), ('I', 10), ('N', 9)],
    'N': [('M', 9), ('E', 15), ('R', 7)],
    'O': [('J', 7), ('P', 13), ('S', 9)],
    'P': [('O', 15), ('L', 7), ('Q', 8), ('U', 11)],
    'Q': [('P', 8), ('R', 9)],
    'R': [('Q', 9), ('N', 7), ('W', 10)],
    'S': [('O', 9), ('T', 9)],
    'T': [('S', 9), ('U', 8)],
    'U': [('T', 8), ('P', 11), ('V', 8)],
    'V': [('U', 8), ('W', 5)],
    'W': [('V', 5), ('R', 10)]
}

#Contains the four charging stations that each node needs to get to
chargingStations = ['H', 'K', 'Q', 'T']

running = True
while running == True: #While the program is running
    #Input the starting point from A to W
    startingPoint = input("Enter your starting point from A to W [TYPE 'EXIT' TO EXIT PROGRAM]: ").upper().strip()
    if startingPoint not in chargingStationNetwork:
        if startingPoint == "exit" or startingPoint == "EXIT": 
            print("Goodbye.")
            break #exits the program
        else:
            print("Invalid starting point. Please enter a starting point from A to W.") 
            #If the point entered in not of A to W, it is invalid. Program asks user to input a valid point. 
    else:
        allDistances, pastNodes = dijkstraAlgorithm(chargingStationNetwork, startingPoint)
        closestChargingStation = min(chargingStations, key=lambda node: allDistances[node])
        print(f"Shortest distances from starting point {startingPoint} to charging stations:")
        for destination in chargingStations:
            shortestRoute = findShortestRoute(startingPoint, destination, pastNodes)
            mostEfficientRoute = findShortestRoute(startingPoint, closestChargingStation, pastNodes)
            print(f"Shortest distance to charging station {destination}: {allDistances[destination]} | Shortest route to charging station {destination}: {' -> '.join(shortestRoute)}")
        #Prints out the shortest routes from the starting point to each of the charging stations.
        #Outputs the weight/distance of route and all the nodes needed to go through in the route.
            
        print(f"Most efficient route from starting point {startingPoint} to charging station: {' -> '.join(mostEfficientRoute)} | distance: {allDistances[closestChargingStation]}")
        #Outputs the most efficient route to the charging station that is the closest to the starting point.
